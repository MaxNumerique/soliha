// middleware.ts
import { NextResponse, NextRequest } from 'next/server';
import { jwtVerify } from 'jose';

const secret = new TextEncoder().encode(process.env.JWT_SECRET!);

export async function middleware(req: NextRequest) {
  console.log("middleware activ√© ‚ù§");
  
  const token = req.cookies.get("token")?.value;
  console.log("üöÄ Middleware ex√©cut√© pour l'URL :", req.url);

  // Permet l'acc√®s √† la page d'accueil du dashboard √† tout le monde
  if (req.url.includes("/dashboard") && req.url === "http://localhost:3000/dashboard") {
    console.log("‚úÖ Acc√®s autoris√© √† la page d'accueil du dashboard");
    return NextResponse.next();
  }

  if (!token) {
    console.log("üîí Aucun token trouv√© ‚Üí Redirection vers /login");
    return NextResponse.redirect(new URL("/login", req.url));
  }

  try {
    const { payload } = await jwtVerify(token, secret);
    const userRoles = payload.roles as string[];

    console.log("‚úÖ Token valide, r√¥les :", userRoles);

    // D√©finition des pages accessibles par r√¥le
    const url = req.nextUrl.clone();
    const path = url.pathname;

    // Acc√®s bas√© sur les r√¥les
    if (userRoles.includes("Admin")) {
      console.log("‚úÖ Acc√®s autoris√© : Admin");
      return NextResponse.next();
    }

    if (userRoles.includes("Utilisateur sp√©cial")) {
      if (path.includes("/dashboard/users")) {
        console.log("‚õî Acc√®s refus√© : Utilisateur sp√©cial ne peut pas acc√©der √† /dashboard/users");
        return NextResponse.redirect(new URL("/dashboard", req.url));
      }
      console.log("‚úÖ Acc√®s autoris√© : Utilisateur sp√©cial");
      return NextResponse.next();
    }

    if (userRoles.includes("Admin Article")) {
      if (!path.includes("/dashboard/article")) {
        console.log("‚õî Acc√®s refus√© : Admin Article ne peut pas acc√©der √† cette page");
        return NextResponse.redirect(new URL("/dashboard", req.url));
      }
      console.log("‚úÖ Acc√®s autoris√© : Admin Article");
      return NextResponse.next();
    }

    if (userRoles.includes("Admin Annonce")) {
      if (!path.includes("/dashboard/annonce")) {
        console.log("‚õî Acc√®s refus√© : Admin Annonce ne peut pas acc√©der √† cette page");
        return NextResponse.redirect(new URL("/dashboard", req.url));
      }
      console.log("‚úÖ Acc√®s autoris√© : Admin Annonce");
      return NextResponse.next();
    }

    console.log("‚õî Acc√®s refus√©, redirection vers /");
    return NextResponse.redirect(new URL("/", req.url));
  } catch (err) {
    console.error("‚ö†Ô∏è Token invalide :", err);
    return NextResponse.redirect(new URL("/login", req.url));
  }
}

// Configuration des routes prot√©g√©es
export const config = {
  matcher: ["/dashboard/:path*", "/admin/:path*"],
};
